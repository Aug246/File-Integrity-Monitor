Metadata-Version: 2.4
Name: file-integrity-monitor
Version: 1.0.0
Summary: Cross-platform File Integrity Monitor with tamper-evident logging
Author-email: File Integrity Monitor Team <team@example.com>
License: MIT
Project-URL: Homepage, https://github.com/example/file-integrity-monitor
Project-URL: Repository, https://github.com/example/file-integrity-monitor
Project-URL: Issues, https://github.com/example/file-integrity-monitor/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: System :: Monitoring
Classifier: Topic :: Security
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: watchdog>=3.0.0
Requires-Dist: cryptography>=41.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: click>=8.0.0
Requires-Dist: rich>=13.0.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: python-dateutil>=2.8.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: docker
Requires-Dist: psycopg2-binary>=2.9.0; extra == "docker"

# File Integrity Monitor (FIM)

[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Tests](https://img.shields.io/badge/tests-passing-green.svg)](https://github.com/example/file-integrity-monitor/actions)

A **cross-platform File Integrity Monitor** that detects and logs file changes with **tamper-evident records**, continuous monitoring, and comprehensive reporting. Built for security professionals, system administrators, and compliance requirements.

## 🎯 Features

- **🔍 Real-time Monitoring**: Watchdog-based file system monitoring with polling fallback
- **🛡️ Tamper Evidence**: HMAC-signed database records and audit trails
- **📊 Comprehensive Detection**: File creation, modification, deletion, permission changes
- **🌐 Cross-platform**: Windows, macOS, and Linux support
- **💾 Local Database**: SQLite with optional PostgreSQL support
- **📈 Rich CLI**: Beautiful terminal interface with progress bars and tables
- **🔒 Security Focused**: SHA-256 hashing, HMAC verification, critical file alerts
- **📋 Export Options**: JSON and CSV data export for analysis

## 🚀 Quick Start

### Installation

```bash
# Clone the repository
git clone https://github.com/example/file-integrity-monitor.git
cd file-integrity-monitor

# Install dependencies
pip install -r requirements.txt

# Install in development mode
pip install -e .
```

### Basic Usage

```bash
# 1. Create baseline for a directory
fim init --path /important/path

# 2. Start monitoring (foreground mode)
fim start --config fim.yml --foreground

# 3. In another terminal, verify changes
fim verify --path /important/path

# 4. Check system status
fim status

# 5. Export data
fim db-export --format json --output results.json
```

### Demo

```bash
# Run the automated demo
cd demo_files
chmod +x demo_script.sh
./demo_script.sh
```

## 🏗️ Architecture

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   File System   │    │   FIM Agent     │    │   SQLite DB     │
│                 │    │                 │    │                 │
│  /etc          │◄──►│  Watchdog       │───►│  Baseline      │
│  /usr/bin      │    │  Event Handler  │    │  Events        │
│  /var/log      │    │  Baseline Mgr   │    │  Audit Log     │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                              │
                              ▼
                       ┌─────────────────┐
                       │   CLI Interface │
                       │                 │
                       │  init           │
                       │  start          │
                       │  verify         │
                       │  status         │
                       │  export         │
                       └─────────────────┘
```

## 📋 CLI Commands

| Command | Description | Example |
|---------|-------------|---------|
| `fim init` | Create baseline for path | `fim init --path /etc` |
| `fim start` | Start monitoring | `fim start --config fim.yml` |
| `fim verify` | Verify against baseline | `fim verify --path /etc` |
| `fim status` | Show system status | `fim status` |
| `fim db-export` | Export data | `fim db-export --format csv` |
| `fim version` | Show version info | `fim version` |

## ⚙️ Configuration

The system uses `fim.yml` for configuration:

```yaml
# Monitor paths
monitor_paths:
  - "/etc"
  - "/usr/local/bin"
  - "/var/log"

# Exclude patterns
exclude_patterns:
  - "*.tmp"
  - "*.log"
  - ".DS_Store"

# Security settings
security:
  hash_algorithm: "sha256"
  enable_hmac: true
  verify_on_startup: true
```

## 🧪 Testing

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=fim --cov-report=html

# Run specific test categories
pytest tests/test_models.py
pytest tests/test_integration.py
```

## 🐳 Docker Deployment

### Quick Start with Docker Compose

```bash
# Start the complete stack
docker-compose up -d

# View logs
docker-compose logs -f fim-agent

# Stop services
docker-compose down
```

### Manual Docker Build

```bash
# Build image
docker build -t fim:latest .

# Run container
docker run -d \
  --name fim-agent \
  -v /etc:/etc:ro \
  -v /usr/local/bin:/usr/local/bin:ro \
  -v $(pwd)/fim.yml:/etc/fim/fim.yml:ro \
  fim:latest
```

## 🔒 Security Features

### Hash Algorithm Choice: SHA-256

- **Cryptographically secure**: Resistant to collision attacks
- **Industry standard**: Widely adopted and audited
- **Performance**: Efficient for large files
- **Future-proof**: No known vulnerabilities

### Tamper Evidence

- **HMAC signatures**: Every database record is signed
- **Audit trails**: Complete operation logging
- **Integrity verification**: Automatic database validation
- **Secret key management**: Secure key generation and storage

### Critical File Detection

```python
# Critical extensions trigger alerts
critical_extensions = {".exe", ".dll", ".so", ".conf", ".ini"}

# Critical paths trigger alerts  
critical_paths = {"/etc", "/bin", "/sbin", "/Windows/System32"}
```

## 📊 Sample Output

### Baseline Creation
```
Creating baseline for: /etc
[████████████████████████████████████████] 100%
Baseline created successfully with 1,247 files
```

### Verification Results
```
┌───────────┬───────┬─────────────────────────────────────┐
│ Status    │ Count │ Files                               │
├───────────┼───────┼─────────────────────────────────────┤
│ Created   │ 1     │ /etc/new_config.conf                │
│ Modified  │ 2     │ /etc/hosts, /etc/nginx/nginx.conf  │
│ Deleted   │ 0     │                                     │
│ Unchanged │ 1,244 │                                     │
└───────────┴───────┴─────────────────────────────────────┘
```

### Status Check
```
┌─────────────────┬─────────────────────┐
│ Metric          │ Value               │
├─────────────────┼─────────────────────┤
│ Database        │ fim.db              │
│ Baseline Files  │ 1,247               │
│ Recent Events   │ 3                   │
└─────────────────┴─────────────────────┘

✓ Database integrity verified
```

## 🚀 Advanced Usage

### Multi-Host Monitoring

```bash
# Agent 1: Monitor /etc
FIM_AGENT_ID=agent-1 fim start --config fim.yml

# Agent 2: Monitor /usr/local
FIM_AGENT_ID=agent-2 fim start --config fim-local.yml

# Central verification
fim verify --path /etc --db agent-1.db
fim verify --path /usr/local --db agent-2.db
```

### Custom Exclusions

```bash
# Exclude specific patterns
fim init --path /var \
  --exclude "*.tmp" \
  --exclude "*.log" \
  --exclude ".cache"
```

### Export and Analysis

```bash
# Export to JSON for analysis
fim db-export --format json --output analysis.json

# Export to CSV for spreadsheet analysis
fim db-export --format csv --output report.csv

# Filter by date range (using jq)
jq '.events[] | select(.timestamp | contains("2024-01-15"))' analysis.json
```

## 🔧 Troubleshooting

### Common Issues

**Permission Denied Errors**
```bash
# Run with appropriate permissions
sudo fim init --path /etc
```

**Watchdog Not Available**
```bash
# Use polling mode
fim start --config fim.yml --polling
```

**Database Locked**
```bash
# Check for running processes
ps aux | grep fim

# Remove lock file (if safe)
rm -f fim.db-wal fim.db-shm
```

### Debug Mode

```bash
# Enable verbose logging
fim start --config fim.yml --verbose

# Check log files
tail -f fim.log
```

## 📈 Performance Considerations

- **Large directories**: Baseline creation scales linearly with file count
- **Memory usage**: Configurable limits for file hashing
- **Database performance**: Indexed queries for fast event retrieval
- **Network impact**: Local operation with optional central reporting

## 🔮 Future Enhancements

- [ ] Web dashboard for visualization
- [ ] Email and webhook alerting
- [ ] Centralized management console
- [ ] Machine learning anomaly detection
- [ ] Integration with SIEM systems
- [ ] Compliance reporting (SOX, PCI, HIPAA)

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Ensure all tests pass
6. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [Watchdog](https://github.com/gorakhargosh/watchdog) for file system monitoring
- [Click](https://click.palletsprojects.com/) for CLI framework
- [Rich](https://github.com/Textualize/rich) for beautiful terminal output
- [SQLite](https://www.sqlite.org/) for embedded database

## 📞 Support

- **Issues**: [GitHub Issues](https://github.com/example/file-integrity-monitor/issues)
- **Documentation**: [Wiki](https://github.com/example/file-integrity-monitor/wiki)
- **Security**: security@example.com

---

**Built with ❤️ for security professionals and system administrators**
